bool isValid(vector<int>& col_placement) {
	int rowId = col_placement.size() - 1;

	for (int i = 0; i < rowId; i++) {
		int diff = abs(col_placement[rowId] - col_placement[i]);

		if (diff == 0 || diff == rowId - i) {
			return false;
		}
	}

	return true;
}

void helper(int n, int row, vector<int> col_placement, vector<vector<int>>& res) {
	if (col == n) {
		res.push_back(col_placement);
	} else {
		for (int i = 0; i < n; i++) {
			col_placement.push_back(i);

			if (isValid(col_placement)) {
				helper(n, row + 1, col_placement, res);
			}

			col_placement.pop_back();
		}
	}
}

vector<vector<int>> NQueens(int n) {
	vector<vector<int>> res;
	vector<int> temp;
	
	helper(n, 0, temp, res);

	return res;
}